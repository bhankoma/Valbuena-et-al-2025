clear
%% Load Data
clear
read_Intan_RHD2000_file
fileinfo = dir(fullfile(path, 'time.dat'));
num_samples = fileinfo.bytes/4; % int32 = 4 bytes
fid = fopen(fullfile(path,'time.dat'), 'r');
t = fread(fid, num_samples, 'int32');
fclose(fid);
t = t / frequency_parameters.amplifier_sample_rate;

num_channels = length(board_adc_channels); % ADC input info from header file
fileinfo = dir(fullfile(path,'analogin.dat'));
num_samples = fileinfo.bytes/(num_channels * 2); % uint16 = 2 bytes
fid = fopen(fullfile(path,'analogin.dat'), 'r');
v = fread(fid, [num_channels, num_samples], 'uint16');
fclose(fid);
v = v * 0.000050354;

ch =0;
fileinfo = dir(fullfile(path,'digitalin.dat'));
num_samples = fileinfo.bytes/2; % uint16 = 2 bytes
fid = fopen(fullfile(path,'digitalin.dat'), 'r');
digital_word = fread(fid, num_samples, 'uint16');
fclose(fid);
digital_input_ch = (bitand(digital_word, 2^ch) > 0);

%% Camera timestamp extraction
camera_diff = diff(digital_input_ch);
camera_ts = t(camera_diff ==1);
disp(sprintf ('%d frames detected', length(camera_ts)));
disp('extracted camera timestamps')

%% LFP .lfp generated by neuroscope at 1250Hz
lfp_file = dir(fullfile(path, "*.lfp")).name;
lfp = bz_LoadBinary((fullfile(path, lfp_file)));
lfp_ch = reshape(lfp, 32, []);
lfp_vhc = lfp_ch(1:32,:);
t_lfp = downsample(t,24);   %downsampled by factor of 24 because 30000/1250 =24
disp('32 channels assigned to VHC')

%%  curation of vhc raw volatage channels 
sample_range = 1:1250;
for ii = 1:size(lfp_vhc, 1)
    disp('Processing channel:')
    disp(ii)
    figure
    toPlot = lfp_vhc(ii, sample_range);
    plot(sample_range/30000, toPlot)

    title(ii)
    disp('Visualising the VHC channels, proceed to exclusion if needed')

end


%% Remove noisey channels in vhc data
exc_vhc = [1,3:15,18:30,32];
lfp_vhc(exc_vhc, :) = [];
disp('Following channels excluded from vhc probe:')
disp(exc_vhc)

%% Common median referencing of data after z-scoring (based on Lemke et. al 2019)
sample_rate_LFP = 1250; %in Hz
lfp_vhc = double(lfp_vhc');
vhc_v_z = zscore(lfp_vhc);
disp('Z-scored all data, proceeding to common mode referencing')
vhc_v_CMR =  vhc_v_z - median(vhc_v_z, 1); 
vhc_v_CMR = vhc_v_CMR';
lfp_vhc = lfp_vhc';
disp('common mode referencing complete')

%% Split LFP into bands 
%theta 3 - 12 Hz
VHC_lfp.theta = eegfilt(vhc_v_CMR,sample_rate_LFP, 3, 12,  0, 0, 0, 'fir1', 0);
%beta 13-30Hz
VHC_lfp.beta = eegfilt(vhc_v_CMR,sample_rate_LFP, 13, 30,  0, 0, 0, 'fir1', 0);
%slow gamma 30-55Hz
VHC_lfp.s_gamma = eegfilt(vhc_v_CMR,sample_rate_LFP, 30, 55,  0, 0, 0, 'fir1', 0);
%fast gamma 55-100Hz
VHC_lfp.f_gamma = eegfilt(vhc_v_CMR,sample_rate_LFP, 55, 100,  0, 0, 0, 'fir1', 0);
VHC_lfp.lfp = vhc_v_CMR;


%% Loading behavior data
annotfile = dir(fullfile(path, '*Annot_*.csv'));
annotfile  = annotfile.name;
events = csvread(fullfile(path, annotfile), 1, 0);
home1_start = camera_ts(events(1,1)+1);
home1_stop = camera_ts(events(1,2)+1);
FOR_start = camera_ts(events(1,1)+1);
FOR_stop = camera_ts(events(1,2)+1);
disp('Loaded Behavior data')


%% load HC labels
HC_app_DLC = readtable((fullfile(path, 'HC.csv')));
HC_app_DLC = camera_ts(HC_app_DLC {:,:});

%% Either load 15min treatment labels
preCNO_app_DLC = readtable((fullfile(path, 'preCNO_15min.csv')));
preCNO_app_DLC  = camera_ts(preCNO_app_DLC {:,:});
postCNO_app_DLC =  readtable((fullfile(path, 'postCNO_15min.csv')));
postCNO_app_DLC  = camera_ts(postCNO_app_DLC {:,:});
postCNO30min_app_DLC =  readtable((fullfile(path, 'postCNO_30min.csv')));
postCNO30min_app_DLC  = camera_ts(postCNO30min_app_DLC {:,:});
disp('Loaded timestamps')


%% or Load 3h treatment labels
pre3h_app_DLC = readtable((fullfile(path, 'pre3h.csv')));
pre3h_app_DLC  = camera_ts(pre3h_app_DLC {:,:});
post3h_app_DLC =  readtable((fullfile(path, 'post3h.csv')));
post3h_app_DLC  = camera_ts(post3h_app_DLC {:,:});
disp('Loaded timestamps')


%% Let's start with defining time windows, make windows of 300 seconds (5min time bin) with 150 seconds before and 150 seconds after
before = 150; %in seconds
after = 150; %in seconds

%% For plotting LFP-- run either HC or PreCNO or PostCNO_15min or PostCNO_30min sections, as some of them use same variables. Excel files with the LFP values and lfp plots will be generated for specific sections.

%% Extracting LFP in HC
event = HC_app_DLC;
save_tag = 'HC'; %IMPORTANT; Change as necessary
n_trials = length(event);

empty_array = zeros((abs(before)+after)*sample_rate_LFP, n_trials); %% Will be populated later as (frames, trials) array
fprintf('Collecting trials of voltage for HC on following channels from - %d to + %d s wrt window\n', abs(before), after)

for ch = 1:size(vhc_v_CMR,1)
   disp("VHC"+ch)
   theta_vhc_lfp{ch} = empty_array;
   gamma_vhc_lfp{ch} = empty_array;
   v_vhc_HC{ch} = empty_array;  %% initialise the cell array element to be an empty array
   for ii = 1:n_trials
       window_start = event(ii) - abs(before);
       window_end = event(ii) + abs(after);
      
       v_vhc_HC{ch}(:, ii) = vhc_v_CMR(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       theta_vhc_lfp{ch}(:, ii) = VHC_lfp.theta(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       gamma_vhc_lfp{ch}(:, ii) = VHC_lfp.s_gamma(ch, (t_lfp>window_start) & (t_lfp<=window_end));
   end
end

disp('Done, proceed to plotting of the power spectra etc')


%% Run for plotting HC lfp plots using the time function of EEGlab
for ch = 1:length(v_vhc_HC)
   figure
   [ersp,itc,powbase,times,freqs,erspboot,itcboot] = newtimef(v_vhc_HC{ch}, (before+after)*sample_rate_LFP, [-(abs(before)*1000) after*1000], sample_rate_LFP, 'cycles', 0, 'maxfreq', 110, 'baseline', NaN);
   saveas(gcf, fullfile(path, 'plots', sprintf('vhc_channel_%d_ersp_cut_spectrum_%d_%d_HC.png', ch, before, after)))
   ersp_HC5min = ersp(:, (times > -150000) & (times < 150000));
   ersp_HC3min = ersp(:, (times > -90000) & (times < 90000));
   ersp_HC1min = ersp(:, (times > -30000) & (times < 30000));
   mean_erspHC5min = mean(ersp_HC5min,2);
   mean_erspHC3min = mean(ersp_HC3min,2);
   mean_erspHC1min = mean(ersp_HC1min,2);
   esrp_vhc_HC = table(freqs' , mean_erspHC5min , mean_erspHC3min , mean_erspHC1min);
   writetable(esrp_vhc_HC,fullfile(path, sprintf('LFP_HC_vhc_%d.csv', ch)))
end

disp('Finished VHC channels')
disp('Done')



%% Extracting LFP at 15min preCNO window
event = preCNO_app_DLC;
save_tag = '15min_timepoint'; %IMPORTANT; Change as necessary
n_trials = length(event);

empty_array = zeros((abs(before)+after)*sample_rate_LFP, n_trials); %% Will be populated later as (frames, trials) array
fprintf('Collecting trials of voltage for 15min_timepoint on following channels from - %d to + %d s wrt timepoint\n', abs(before), after)

for ch = 1:size(vhc_v_CMR,1)
   disp("VHC"+ch)
   theta_vhc_lfp{ch} = empty_array;
   gamma_vhc_lfp{ch} = empty_array;
   v_vhc_pre{ch} = empty_array;  %% initialise the cell array element to be an empty array
   for ii = 1:n_trials
       window_start = event(ii) - abs(before);
       window_end = event(ii) + abs(after);
      
       v_vhc_pre{ch}(:, ii) = vhc_v_CMR(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       theta_vhc_lfp{ch}(:, ii) = VHC_lfp.theta(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       gamma_vhc_lfp{ch}(:, ii) = VHC_lfp.s_gamma(ch, (t_lfp>window_start) & (t_lfp<=window_end));
   end
end
disp('Done, proceed to plotting of the power spectra etc')


%% Plotting lfp at preCNO_15min window
for ch = 1:length(v_vhc_pre)
   figure
   [ersp,itc,powbase,times,freqs,erspboot,itcboot] = newtimef(v_vhc_pre{ch}, (before+after)*sample_rate_LFP, [-(abs(before)*1000) after*1000], sample_rate_LFP, 'cycles', 0, 'maxfreq', 110, 'baseline', NaN);
   saveas(gcf, fullfile(path, 'plots', sprintf('vhc_channel_%d_ersp_cut_spectrum_%d_%d_preCNO.png', ch, before, after)))
   ersp_pre5min = ersp(:, (times > -150000) & (times < 150000));
   ersp_pre3min = ersp(:, (times > -90000) & (times < 90000));
   ersp_pre1min = ersp(:, (times > -30000) & (times < 30000));
   mean_ersppre5min = mean(ersp_pre5min,2);
   mean_ersppre3min = mean(ersp_pre3min,2);
   mean_ersppre1min = mean(ersp_pre1min,2);
   esrp_vhc_pre = table(freqs' , mean_ersppre5min , mean_ersppre3min , mean_ersppre1min);
   writetable(esrp_vhc_pre,fullfile(path, sprintf('LFP_preCNO_vhc_%d.csv', ch)))
end

disp('Finished VHC channels')
disp('Done')



%% Extracting LFP at postCNO_15min window
event = postCNO_app_DLC;
save_tag = '15min_timepoint'; %IMPORTANT; Change as necessary
n_trials = length(event);

empty_array = zeros((abs(before)+after)*sample_rate_LFP, n_trials); %% Will be populated later as (frames, trials) array
fprintf('Collecting trials of voltage for 15min_timepoint on following channels from - %d to + %d s wrt timepoint\n', abs(before), after)

for ch = 1:size(vhc_v_CMR,1)
   disp("VHC"+ch)
   theta_vhc_lfp{ch} = empty_array;
   gamma_vhc_lfp{ch} = empty_array;
   v_vhc_post{ch} = empty_array;  %% initialise the cell array element to be an empty array
   for ii = 1:n_trials
       window_start = event(ii) - abs(before);
       window_end = event(ii) + abs(after);
      
       v_vhc_post{ch}(:, ii) = vhc_v_CMR(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       theta_vhc_lfp{ch}(:, ii) = VHC_lfp.theta(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       gamma_vhc_lfp{ch}(:, ii) = VHC_lfp.s_gamma(ch, (t_lfp>window_start) & (t_lfp<=window_end));
   end
end
disp('Done, proceed to plotting of the power spectra etc')


%% Plotting lfp for postCNO_15min window
for ch = 1:length(v_vhc_post)
   figure
   [ersp,itc,powbase,times,freqs,erspboot,itcboot] = newtimef(v_vhc_post{ch}, (before+after)*sample_rate_LFP, [-(abs(before)*1000) after*1000], sample_rate_LFP, 'cycles', 0, 'maxfreq', 110, 'baseline', NaN);
   saveas(gcf, fullfile(path, 'plots', sprintf('vhc_channel_%d_ersp_cut_spectrum_%d_%d_post15min.png', ch, before, after)))
   ersp_post5min = ersp(:, (times > -150000) & (times < 150000));
   ersp_post3min = ersp(:, (times > -90000) & (times < 90000));
   ersp_post1min = ersp(:, (times > -30000) & (times < 30000));
   mean_ersppost5min = mean(ersp_post5min,2);
   mean_ersppost3min = mean(ersp_post3min,2);
   mean_ersppost1min = mean(ersp_post1min,2);
   esrp_vhc_post = table(freqs' , mean_ersppost5min , mean_ersppost3min , mean_ersppost1min);
   writetable(esrp_vhc_post,fullfile(path, sprintf('LFP_post15min_vhc_%d.csv', ch)))
end
disp('Finished VHC channels')
disp('Done')


%% Extracting LFP at postCNO_30min window
event = postCNO30min_app_DLC;
save_tag = '15min_timepoint'; %IMPORTANT; Change as necessary
n_trials = length(event);

empty_array = zeros((abs(before)+after)*sample_rate_LFP, n_trials); %% Will be populated later as (frames, trials) array
fprintf('Collecting trials of voltage for 15min_timepoint on following channels from - %d to + %d s wrt timepoint\n', abs(before), after)

for ch = 1:size(vhc_v_CMR,1)
   disp("VHC"+ch)
   theta_vhc_lfp{ch} = empty_array;
   gamma_vhc_lfp{ch} = empty_array;
   v_vhc_post30min{ch} = empty_array;  %% initialise the cell array element to be an empty array
   for ii = 1:n_trials
       window_start = event(ii) - abs(before);
       window_end = event(ii) + abs(after);
      
       v_vhc_post30min{ch}(:, ii) = vhc_v_CMR(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       theta_vhc_lfp{ch}(:, ii) = VHC_lfp.theta(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       gamma_vhc_lfp{ch}(:, ii) = VHC_lfp.s_gamma(ch, (t_lfp>window_start) & (t_lfp<=window_end));
   end
end
disp('Done, proceed to plotting of the power spectra etc')


%% Plotting lfp for postCNO_30min window
for ch = 1:length(v_vhc_post30min)
   figure
   [ersp,itc,powbase,times,freqs,erspboot,itcboot] = newtimef(v_vhc_post30min{ch}, (before+after)*sample_rate_LFP, [-(abs(before)*1000) after*1000], sample_rate_LFP, 'cycles', 0, 'maxfreq', 110, 'baseline', NaN);
   saveas(gcf, fullfile(path, 'plots', sprintf('vhc_channel_%d_ersp_cut_spectrum_%d_%d_postCNO_30min.png', ch, before, after)))
   ersp_post5min = ersp(:, (times > -150000) & (times < 150000));
   ersp_post3min = ersp(:, (times > -90000) & (times < 90000));
   ersp_post1min = ersp(:, (times > -30000) & (times < 30000));
   mean_ersppost5min = mean(ersp_post5min,2);
   mean_ersppost3min = mean(ersp_post3min,2);
   mean_ersppost1min = mean(ersp_post1min,2);
   esrp_vhc_post = table(freqs' , mean_ersppost5min , mean_ersppost3min , mean_ersppost1min);
   writetable(esrp_vhc_post,fullfile(path, sprintf('LFP_post30min_vhc_%d.csv', ch)))
end
disp('Finished VHC channels')
disp('Done')


%% Extracting LFP at pre3h window
event = pre3h_app_DLC;
save_tag = '3h_timepoint'; %IMPORTANT; Change as necessary
n_trials = length(event);

empty_array = zeros((abs(before)+after)*sample_rate_LFP, n_trials); %% Will be populated later as (frames, trials) array
fprintf('Collecting trials of voltage for 3h_timepoint on following channels from - %d to + %d s wrt timepoint\n', abs(before), after)

for ch = 1:size(vhc_v_CMR,1)
   disp("VHC"+ch)
   theta_vhc_lfp{ch} = empty_array;
   gamma_vhc_lfp{ch} = empty_array;
   v_vhc_pre3h{ch} = empty_array;  %% initialise the cell array element to be an empty array
   for ii = 1:n_trials
       window_start = event(ii) - abs(before);
       window_end = event(ii) + abs(after);
      
       v_vhc_pre3h{ch}(:, ii) = vhc_v_CMR(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       theta_vhc_lfp{ch}(:, ii) = VHC_lfp.theta(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       gamma_vhc_lfp{ch}(:, ii) = VHC_lfp.s_gamma(ch, (t_lfp>window_start) & (t_lfp<=window_end));
   end
end
disp('Done, proceed to plotting of the power spectra etc')


%% Plotting lfp for pre3h window
for ch = 1:length(v_vhc_pre3h)
   figure
   [ersp,itc,powbase,times,freqs,erspboot,itcboot] = newtimef(v_vhc_pre3h{ch}, (before+after)*sample_rate_LFP, [-(abs(before)*1000) after*1000], sample_rate_LFP, 'cycles', 0, 'maxfreq', 110, 'baseline', NaN);
   saveas(gcf, fullfile(path, 'plots', sprintf('vhc_channel_%d_ersp_cut_spectrum_%d_%d_pre3h.png', ch, before, after)))
   ersp_5min = ersp(:, (times > -150000) & (times < 150000));
   ersp_3min = ersp(:, (times > -90000) & (times < 90000));
   ersp_1min = ersp(:, (times > -30000) & (times < 30000));
   mean_ersp5min = mean(ersp_5min,2);
   mean_ersp3min = mean(ersp_3min,2);
   mean_ersp1min = mean(ersp_1min,2);
   esrp_vhc_post = table(freqs' , mean_ersp5min , mean_ersp3min , mean_ersp1min);
   writetable(esrp_vhc_post,fullfile(path, sprintf('LFP_pre3h_vhc_%d.csv', ch)))
end
disp('Finished VHC channels')
disp('Done')



%% Extracting LFP at post3h window
event = post3h_app_DLC;
save_tag = '3h_timepoint'; %IMPORTANT; Change as necessary
n_trials = length(event);

empty_array = zeros((abs(before)+after)*sample_rate_LFP, n_trials); %% Will be populated later as (frames, trials) array
fprintf('Collecting trials of voltage for 3h_timepoint on following channels from - %d to + %d s wrt timepoint\n', abs(before), after)

for ch = 1:size(vhc_v_CMR,1)
   disp("VHC"+ch)
   theta_vhc_lfp{ch} = empty_array;
   gamma_vhc_lfp{ch} = empty_array;
   v_vhc_post{ch} = empty_array;  %% initialise the cell array element to be an empty array
   for ii = 1:n_trials
       window_start = event(ii) - abs(before);
       window_end = event(ii) + abs(after);
      
       v_vhc_post{ch}(:, ii) = vhc_v_CMR(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       theta_vhc_lfp{ch}(:, ii) = VHC_lfp.theta(ch, (t_lfp>window_start) & (t_lfp<=window_end));
       gamma_vhc_lfp{ch}(:, ii) = VHC_lfp.s_gamma(ch, (t_lfp>window_start) & (t_lfp<=window_end));
   end
end
disp('Done, proceed to plotting of the power spectra etc')


%% Plotting lfp for post3h window
for ch = 1:length(v_vhc_post)
   figure
   [ersp,itc,powbase,times,freqs,erspboot,itcboot] = newtimef(v_vhc_post{ch}, (before+after)*sample_rate_LFP, [-(abs(before)*1000) after*1000], sample_rate_LFP, 'cycles', 0, 'maxfreq', 110, 'baseline', NaN);
   saveas(gcf, fullfile(path, 'plots', sprintf('vhc_channel_%d_ersp_cut_spectrum_%d_%d_post3h.png', ch, before, after)))
   ersp_5min = ersp(:, (times > -150000) & (times < 150000));
   ersp_3min = ersp(:, (times > -90000) & (times < 90000));
   ersp_1min = ersp(:, (times > -30000) & (times < 30000));
   mean_ersp5min = mean(ersp_5min,2);
   mean_ersp3min = mean(ersp_3min,2);
   mean_ersp1min = mean(ersp_1min,2);
   esrp_vhc_post = table(freqs' , mean_ersp5min , mean_ersp3min , mean_ersp1min);
   writetable(esrp_vhc_post,fullfile(path, sprintf('LFP_post3h_vhc_%d.csv', ch)))
end
disp('Finished VHC channels')
disp('Done')



